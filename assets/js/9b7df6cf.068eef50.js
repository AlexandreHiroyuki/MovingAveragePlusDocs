"use strict";(self.webpackChunkmoving_average_plus_docs=self.webpackChunkmoving_average_plus_docs||[]).push([[600],{5680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>m});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=u(n),y=a,m=c["".concat(i,".").concat(y)]||c[y]||g[y]||o;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=y;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[c]="string"==typeof e?e:a,s[1]=p;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},7265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var r=n(8168),a=(n(6540),n(5680));const o={sidebar_position:1},s="\ud83d\udce5 Push",p={unversionedId:"class-methods/input-output/push",id:"class-methods/input-output/push",title:"\ud83d\udce5 Push",description:"Inserts a new element in the internal array and returns a pointer.",source:"@site/docs/class-methods/input-output/push.md",sourceDirName:"class-methods/input-output",slug:"/class-methods/input-output/push",permalink:"/MovingAveragePlusDocs/docs/class-methods/input-output/push",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/class-methods/input-output/push.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Input/Output Methods",permalink:"/MovingAveragePlusDocs/docs/category/inputoutput-methods"},next:{title:"\ud83d\udce4 Get",permalink:"/MovingAveragePlusDocs/docs/class-methods/input-output/get"}},i={},u=[{value:"\ud83d\udcdd Syntax",id:"-syntax",level:3},{value:"\ud83d\udd2e Example",id:"-example",level:3},{value:"\u23f1 Complexity",id:"-complexity",level:3}],l={toc:u},c="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"-push"},"\ud83d\udce5 Push"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Inserts")," a ",(0,a.yg)("strong",{parentName:"p"},"new element")," in the internal array and ",(0,a.yg)("strong",{parentName:"p"},"returns")," a pointer.\n",(0,a.yg)("em",{parentName:"p"},"Methods that ",(0,a.yg)("strong",{parentName:"em"},"return pointers")," allow ",(0,a.yg)("strong",{parentName:"em"},"chained calls"),".")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"MovingAveragePlus<unsigned int> intAverage(10);\n\nunsigned int x = 5, y = 10;\nunsigned int result, first, last;\n\nresult = intAverage.push(x).push(y).get();\nfirst = intAverage.push(56).front();\nlast = intAverage.push(8).back();\n")),(0,a.yg)("h3",{id:"-syntax"},"\ud83d\udcdd Syntax"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"MovingAveragePlus<TypeOfArray> &push(TypeOfArray input)\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Inserts")," the ",(0,a.yg)("strong",{parentName:"li"},"input")," of type ",(0,a.yg)("strong",{parentName:"li"},"TypeOfArray")," at the end of the ",(0,a.yg)("strong",{parentName:"li"},"array"),".")),(0,a.yg)("h3",{id:"-example"},"\ud83d\udd2e Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"// This will create an MovingAverage of size 5 and unsigned type\n// Array: 0 0 0 0 0\nMovingAveragePlus<unsigned int> intAverage(5);\n\n// Array: 6\nintAverage.push(6);\n\n// Array: 1 6\n// Array: 2 1 6\n// Array: 3\n// Array: 4 3 2 1 6\nfor(int i = 1; i < 5; i++){\n    intAverage.push(i);\n}\n\n// Array: 21 1 2 3 4\nintAverage.push(21);\n")),(0,a.yg)("h3",{id:"-complexity"},"\u23f1 Complexity"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Constant (O(1))"),"."))}g.isMDXComponent=!0}}]);