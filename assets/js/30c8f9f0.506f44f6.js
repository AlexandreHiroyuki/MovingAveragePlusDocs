"use strict";(self.webpackChunkmoving_average_plus_docs=self.webpackChunkmoving_average_plus_docs||[]).push([[509],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(g,s(s({ref:t},p),{},{components:r})):n.createElement(g,s({ref:t},p))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9704:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:2},s="\ud83d\udee0 Constructor",i={unversionedId:"class-methods/constructor",id:"class-methods/constructor",title:"\ud83d\udee0 Constructor",description:"\ud83d\udcdd Syntax",source:"@site/docs/class-methods/constructor.md",sourceDirName:"class-methods",slug:"/class-methods/constructor",permalink:"/MovingAveragePlusDocs/docs/class-methods/constructor",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/class-methods/constructor.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udce6 Moving Average+ Methods",permalink:"/MovingAveragePlusDocs/docs/class-methods/intro"},next:{title:"Input/Output Methods",permalink:"/MovingAveragePlusDocs/docs/category/inputoutput-methods"}},l={},c=[{value:"\ud83d\udcdd Syntax",id:"-syntax",level:2},{value:"\ud83d\udd2e Example",id:"-example",level:2},{value:"\u23f1 Complexity",id:"-complexity",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-constructor"},"\ud83d\udee0 Constructor"),(0,a.kt)("h2",{id:"-syntax"},"\ud83d\udcdd Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Passing only size as an argument\nMovingAveragePlus<class TypeOfArray> yourAverageName(size_t size);\n// Or, also, passing a value to initialize the array\n-Deprecated- MovingAveragePlus<class TypeOfArray> yourAverageName(size_t size, TypeOfArray initialize);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Template parameter"),".\n",(0,a.kt)("strong",{parentName:"li"},"TypeOfArray")," is the ",(0,a.kt)("strong",{parentName:"li"},"type of the array elements"),".")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Passing only size as an argument"),".",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"The class will create an array with the ",(0,a.kt)("strong",{parentName:"p"},"size")," passed as an argument and, by ",(0,a.kt)("strong",{parentName:"p"},"default"),", all positions will initialize with 0."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"-Deprecated-")," ",(0,a.kt)("strong",{parentName:"li"},"Passing size and initializer value as argument"),".")),(0,a.kt)("h2",{id:"-example"},"\ud83d\udd2e Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// This will create an MovingAverage of size 10 and unsigned type\nMovingAveragePlus<unsigned int> intAverage(10);\n")),(0,a.kt)("h2",{id:"-complexity"},"\u23f1 Complexity"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'If the option "1." is used, the complexity will be constant (O(1)).'),(0,a.kt)("li",{parentName:"ul"},'-Deprecated- Although, if using the option "2.", complexity will be linear (O(n)) in the array size passed as an argument.')))}m.isMDXComponent=!0}}]);